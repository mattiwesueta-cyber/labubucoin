// üéÆ LabubuCoin Game Script
class LabubuGame {
    constructor() {
        this.coins = 0;
        this.stableIncome = 3.65; // –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É
        this.profitPerClick = 1;
        this.boost = 2;
        this.boostTimeLeft = 0;
        this.isBoostActive = false;
        this.costume = 'labubu.png';
        this.accessories = {};
        this.selectedCard = null;
        this.selectedAccessory = null;
        this.userId = null;
        this.isOnline = true; // —Ñ–ª–∞–≥ —á—Ç–æ –∏–≥—Ä–æ–∫ –æ–Ω–ª–∞–π–Ω
        this.onlineIncomeInterval = null; // –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞
        this.lastOnlineIncomeSave = Date.now(); // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞

        // –°–∏—Å—Ç–µ–º–∞ —ç–Ω–µ—Ä–≥–∏–∏
        this.currentEnergy = 100; // —Ç–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è
        this.maxEnergy = 100; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
        this.lastEnergyUpdate = Date.now(); // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏

        // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
        this.currentLevel = 1;
        this.currentXp = 0;
        this.levelsConfig = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞

        // –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        this.playerData = {
            level: 1,
            referrals_count: 0
        };

        this.db = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ init() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
    async initLevelsSystem() {
        console.log('üîÑ Starting levels system initialization...');
        console.log('üîç Checking if window object exists:', !!window);
        console.log('üîç Available window properties:', Object.keys(window).filter(key => key.includes('Level') || key.includes('Config')));
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —É—Ä–æ–≤–Ω–µ–π
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 100; // 10 seconds maximum wait
            
            const checkConfig = () => {
                attempts++;
                console.log(`‚è≥ Waiting for levels config... (attempt ${attempts}/${maxAttempts})`);
                
                if (window.LevelsConfig) {
                    this.levelsConfig = window.LevelsConfig;
                    console.log('üéÆ Levels system initialized with config');
                    console.log('üìä Config details:', {
                        levels: this.levelsConfig.levels?.length,
                        ranks: this.levelsConfig.ranks?.length
                    });
                    resolve();
                } else if (attempts >= maxAttempts) {
                    console.error('‚ùå Failed to load levels config after maximum attempts');
                    // Create a fallback config to prevent the app from breaking
                    this.createFallbackLevelsConfig();
                    resolve();
                } else {
                    setTimeout(checkConfig, 100);
                }
            };
            checkConfig();
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
    createFallbackLevelsConfig() {
        console.log('üõ†Ô∏è Creating fallback levels config...');
        this.levelsConfig = {
            levels: [{ level: 1, totalXpRequired: 0, rank: 'Bronze 1', rankColor: '#CD7F32' }],
            ranks: [{ id: 'bronze_1', name: 'Bronze 1', requiredCoins: 0, color: '#CD7F32' }],
            getLevelByTotalXP: (xp) => 1,
            getLevelProgress: (xp) => 0,
            getRankByCoins: (coins) => ({ id: 'bronze_1', name: 'Bronze 1', requiredCoins: 0, color: '#CD7F32' }),
            getLevelInfo: (level) => ({ level: 1, totalXpRequired: 0, rank: 'Bronze 1', rankColor: '#CD7F32' })
        };
        console.log('‚úÖ Fallback levels config created');
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
    calculateLevel() {
        if (!this.levelsConfig) {
            return { level: 1, currentXp: 0, progress: 0, xpToNextLevel: 100 };
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∫ XP
        const currentXp = Math.floor(this.coins);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–ù–ï –∏–∑–º–µ–Ω—è–µ–º this.currentLevel –∑–¥–µ—Å—å!)
        const calculatedLevel = this.levelsConfig.getLevelByTotalXP(currentXp);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        const progress = this.levelsConfig.getLevelProgress(currentXp);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
        const levelInfo = this.levelsConfig.getLevelInfo(calculatedLevel);
        const nextLevelInfo = this.levelsConfig.getLevelInfo(calculatedLevel + 1);
        
        let xpToNextLevel = 0;
        if (nextLevelInfo) {
            xpToNextLevel = nextLevelInfo.totalXpRequired - currentXp;
        }
        
        return {
            level: calculatedLevel,
            currentXp: currentXp,
            progress: progress,
            xpToNextLevel: xpToNextLevel,
            levelInfo: levelInfo,
            nextLevelInfo: nextLevelInfo
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —É—Ä–æ–≤–Ω—è
    updateLevelProgressBar() {
        if (!this.levelsConfig) return;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –î–û –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        const oldLevel = this.currentLevel;
        
        const levelData = this.calculateLevel();
        const progressElement = document.getElementById('progress_value');
        const rankElement = document.getElementById('level_rank');
        const progressTextElement = document.getElementById('level_progress');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –æ—Ç 0 –¥–æ 100%
        if (progressElement) {
            progressElement.style.width = `${levelData.progress}%`;
            console.log('üé® Progress bar updated to:', levelData.progress.toFixed(1) + '%');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–Ω–≥–∞ –∏ —É—Ä–æ–≤–Ω—è
        if (rankElement && levelData.levelInfo) {
            const rankInfo = this.levelsConfig.getRankByCoins(this.coins);
            rankElement.textContent = `${rankInfo.icon} ${rankInfo.name}`;
            console.log('üèÜ Rank updated to:', `${rankInfo.icon} ${rankInfo.name}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
        if (progressTextElement) {
            const currentRank = this.levelsConfig.getRankByCoins(this.coins);
            const nextRank = this.levelsConfig.getNextRank(this.coins);
            
            if (!nextRank) {
                progressTextElement.textContent = 'MAX RANK';
                         } else {
                const coinsToNextRank = nextRank.requiredCoins - this.coins;
                progressTextElement.textContent = `${this.formatNumber(Math.floor(coinsToNextRank))} Coins left`;
            }
            console.log('üìä Progress text updated to:', progressTextElement.textContent);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º —É—Ä–æ–≤–Ω–µ–º)
        if (oldLevel !== levelData.level && this.userId && this.db) {
            console.log('üÜô Level changed:', oldLevel, '‚Üí', levelData.level);
            this.saveLevelToDB(levelData.level);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
            if (levelData.level > oldLevel) {
                this.showLevelUpNotification(levelData);
            }
        }
        
        console.log('Level updated:', {
            level: levelData.level,
            rank: levelData.levelInfo?.rank,
            title: levelData.levelInfo?.title,
            currentXp: levelData.currentXp,
            progress: levelData.progress.toFixed(1) + '%',
            xpToNext: levelData.xpToNextLevel
        });
    }

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    checkItemRequirements(itemElement) {
        const requiredLevel = parseInt(itemElement.dataset.requiredLevel) || 1;
        const requiredReferrals = parseInt(itemElement.dataset.requiredReferrals) || 0;
        
        const playerLevel = this.calculateLevel().level;
        const playerReferrals = this.playerData.referrals_count;
        
        return {
            canBuy: playerLevel >= requiredLevel && playerReferrals >= requiredReferrals,
            hasLevel: playerLevel >= requiredLevel,
            hasReferrals: playerReferrals >= requiredReferrals,
            playerLevel,
            playerReferrals,
            requiredLevel,
            requiredReferrals
        };
    }

    // üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    updateItemsAvailability() {
        const allItems = document.querySelectorAll('.box_lb[data-required-level]');
        
        allItems.forEach(itemElement => {
            const wrapper = itemElement.closest('.wrapper_lb');
            if (!wrapper) return;
            
            const requirements = this.checkItemRequirements(itemElement);
            
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            wrapper.classList.remove('blocked_card', 'blocked_referals');
            
            if (!requirements.canBuy) {
                if (!requirements.hasLevel) {
                    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é
                    wrapper.classList.add('blocked_card');
                    console.log(`üîí Item ${itemElement.dataset.id} blocked by level requirement:`, 
                               requirements.playerLevel, '/', requirements.requiredLevel);
                } else if (!requirements.hasReferrals) {
                    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
                    wrapper.classList.add('blocked_referals');
                    console.log(`üîí Item ${itemElement.dataset.id} blocked by referrals requirement:`, 
                               requirements.playerReferrals, '/', requirements.requiredReferrals);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ UI
                this.updateRequirementDisplay(wrapper, requirements);
            } else {
                console.log(`‚úÖ Item ${itemElement.dataset.id} is available for purchase`);
            }
        });
    }

    // üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ UI –∫–∞—Ä—Ç–æ—á–∫–∏
    updateRequirementDisplay(wrapper, requirements) {
        // –û–±–Ω–æ–≤–ª—è–µ–º required level
        const levelRequirement = wrapper.querySelector('.required_level .row_required span:last-child');
        if (levelRequirement) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º required referrals
        const referralsRequirement = wrapper.querySelector('.required_referals .row_required span:last-child');
        if (referralsRequirement) {
            referralsRequirement.textContent = requirements.requiredReferrals;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤ –ë–î
    async saveLevelToDB(level) {
        if (!this.userId || !this.db) return;
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            const success = await this.db.updatePlayerLevel(this.userId, level);
            if (success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                this.currentLevel = level;
                console.log('üíæ Level saved to DB and updated locally:', level);
            }
        } catch (error) {
            console.error('‚ùå Error saving level to DB:', error);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    showLevelUpNotification(levelData) {
        const rankInfo = this.levelsConfig.getRankByCoins(this.coins);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'level-up-notification';
        notification.innerHTML = `
            <div class="level-up-content">
                <h3>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
                <p>–î–æ—Å—Ç–∏–≥–Ω—É—Ç ${levelData.level} —É—Ä–æ–≤–µ–Ω—å!</p>
                <p>${rankInfo.icon} ${rankInfo.name}</p>
                <p class="level-title">${levelData.levelInfo?.title || '–ú–∞—Å—Ç–µ—Ä'}</p>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            z-index: 10000;
            text-align: center;
            animation: levelUpAnim 3s ease-in-out;
            font-family: 'Gilroy-Bold', sans-serif;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!document.getElementById('levelUpStyles')) {
            const styles = document.createElement('style');
            styles.id = 'levelUpStyles';
            styles.textContent = `
                @keyframes levelUpAnim {
                    0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
                    20% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
                    80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                    100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
                }
                .level-up-notification h3 { margin: 0 0 10px 0; font-size: 24px; }
                .level-up-notification p { margin: 5px 0; font-size: 16px; }
                .level-up-notification .level-title { font-size: 18px; font-weight: bold; }
            `;
            document.head.appendChild(styles);
        }
        
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
        
        console.log('üéâ Level up notification shown for level:', levelData.level);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è –∏–∑ –ë–î
    async loadLevelFromDB() {
        if (!this.userId || !this.db) return 1;
        
        try {
            const data = await this.db.loadPlayerData(this.userId);
            return data?.player_level || 1;
        } catch (error) {
            console.error('‚ùå Error loading level from DB:', error);
            return 1;
        }
    }

    getPlayerDataForSave() {
        const data = {
            coins: this.coins,
            stableIncome: this.stableIncome,
            profitPerClick: this.profitPerClick,
            boost: this.boost,
            boostTimeLeft: this.boostTimeLeft,
            isBoostActive: this.isBoostActive,
            costume: this.costume,
            accessories: this.accessories,
            playerLevel: this.currentLevel // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
            // last_active –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Å –∫–ª–∏–µ–Ω—Ç–∞!
        };
        
        console.log('getPlayerDataForSave - accessories:', this.accessories);
        console.log('getPlayerDataForSave - level:', this.currentLevel);
        
        return data;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ URL
    getReferralCode() {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const refCode = urlParams.get('ref') || urlParams.get('referral');
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp start parameter
            if (window.Telegram?.WebApp?.initDataUnsafe?.start_param) {
                const startParam = window.Telegram.WebApp.initDataUnsafe.start_param;
                if (startParam.startsWith('ref_')) {
                    return startParam.substring(4); // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'ref_'
                }
            }
            
            console.log('üîó Referral code from URL:', refCode);
            return refCode;
        } catch (error) {
            console.error('‚ùå Error getting referral code:', error);
            return null;
        }
    }

    async init() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        const loader = document.querySelector('.load_bg');
        if (loader) loader.style.display = '';
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ/–∞–Ω–∏–º–∞—Ü–∏–∏/—Ä–µ—Å—É—Ä—Å–æ–≤
        console.log('‚è≥ Waiting for video/animation resources to load...');
        await new Promise(r => setTimeout(r, 1200));
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ URL
        this.referralCode = this.getReferralCode();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ supabase (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
        while (!window.GameDatabase) { // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ window.GameDatabase
            await new Promise(r => setTimeout(r, 150)); // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 100ms –¥–æ 150ms
        }
        this.db = new window.GameDatabase(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º db
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π –∏ –ñ–î–ï–ú –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await this.initLevelsSystem();
        
        this.setupEventListeners();
        this.updateUI();
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp API
        await this.loadTelegramUser();
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        this.renderTopPlayers();
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ä–∞–Ω–≥–∏
        this.renderReferralRanks();
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–≥—Ä–æ–∫–∞
        this.renderPlayerReferrals();
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('‚è≥ Finalizing video/animation setup...');
        await new Promise(r => setTimeout(r, 800));
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if (loader) loader.style.display = 'none';
    }

    async loadTelegramUser(retry = 0) {
        try {
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
                const user = window.Telegram.WebApp.initDataUnsafe.user;
                
                console.log('üì± Telegram user data:', user);
                console.log('üÜî User ID:', user.id, 'type:', typeof user.id);
                console.log('üë§ Username:', user.username);
                
                this.userId = user.id; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º userId
                
                console.log('üíæ Saved userId to game:', this.userId);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                const avatarImg = document.getElementById('tg_avatar');
                if (avatarImg && user.photo_url) {
                    avatarImg.src = user.photo_url;
                    avatarImg.alt = user.username || 'avatar';
                }
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º username –∏–ª–∏ –∏–º—è
                const userElement = document.getElementById('user_id');
                if (userElement) {
                    userElement.textContent = user.username ? `@${user.username}` : user.first_name;
                }
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase, –ø–µ—Ä–µ–¥–∞–≤–∞—è username –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                await this.loadPlayerDataFromDB(user.id, user.username, this.referralCode);
            } else {
                // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                const urlParams = new URLSearchParams(window.location.search);
                const urlUserId = urlParams.get('tg_user_id');
                const urlUsername = urlParams.get('tg_username');
                
                if (urlUserId) {
                    console.log('üîó Getting user data from URL parameters');
                    console.log('üÜî URL User ID:', urlUserId);
                    console.log('üë§ URL Username:', urlUsername);
                    
                    this.userId = parseInt(urlUserId);
                    
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º username
                    const userElement = document.getElementById('user_id');
                    if (userElement) {
                        userElement.textContent = urlUsername ? `@${urlUsername}` : 'Player';
                    }
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await this.loadPlayerDataFromDB(this.userId, urlUsername, this.referralCode);
                } else if (retry < 15) {
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ/–∞–Ω–∏–º–∞—Ü–∏–∏
                    const waitTime = Math.min(800 + (retry * 200), 2000); // –æ—Ç 800ms –¥–æ 2s
                    console.log(`‚è≥ Retry ${retry + 1}/15, waiting ${waitTime}ms for Telegram WebApp...`);
                    setTimeout(() => this.loadTelegramUser(retry + 1), waitTime);
                } else {
                    console.log('‚ùå No user data available from Telegram WebApp or URL after 15 attempts');
                    const userElement = document.getElementById('user_id');
                    if (userElement) userElement.textContent = 'Player';
                }
            }
        } catch (e) {
            console.error(e);
        }
    }

    async loadPlayerDataFromDB(userId, username = null, referralCode = null) {
        if (!this.db) return;
        
        console.log('üéÆ Loading player data for userId:', userId, 'username:', username, 'referralCode:', referralCode);
        
        const data = await this.db.loadPlayerData(userId, username, referralCode);
        if (data) {
            console.log('üì¶ Received player data from DB:', data);
            console.log('üí∞ Balance from DB:', data.balance, 'type:', typeof data.balance);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            const timeResponse = await fetch('https://labubucoin.vercel.app/api/server-time');
            const timeData = await timeResponse.json();
            const now = timeData.timestamp;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            let needsUpdate = false;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã last_active
            if (!data.last_active || new Date(data.last_active).getTime() > now) {
                data.last_active = timeData.serverTime;
                needsUpdate = true;
            }

            // –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (needsUpdate) {
                console.log('Resetting invalid values:', {
                    last_active: data.last_active,
                    stable_income: data.stable_income
                });
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                if (data.last_active) {
                    await this.db.updateLastActive(userId, data.last_active);
                }
                if (data.stable_income !== undefined) {
                    await this.db.updateAccessoriesAndIncome(userId, undefined, data.stable_income);
                }
                // –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }

            // –ü–∞—Ä—Å–∏–º accessories, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if (data.accessories && typeof data.accessories === 'string') {
                try {
                    data.accessories = JSON.parse(data.accessories);
                } catch (e) {
                    data.accessories = {};
                }
            }
            
            // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –í–°–ï–ì–î–ê, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            this.coins = data.balance || 0;
            this.stableIncome = data.stable_income || 3.65; // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –Ω–∞ stableIncome
            this.profitPerClick = data.profit_per_click || 1;
            this.boost = data.boost || 2;
            this.boostTimeLeft = data.boost_time_left || 0;
            this.isBoostActive = data.is_boost_active || false;
            this.costume = data.costume || 'labubu.png';
            this.accessories = data.accessories || {};
            this.currentLevel = data.player_level || 1; // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
            this.currentEnergy = data.current_energy !== undefined ? data.current_energy : 100; // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é
            this.maxEnergy = data.max_energy !== undefined ? data.max_energy : 100; // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é

            console.log('üíæ Energy loaded from DB:', this.currentEnergy + '/' + this.maxEnergy);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
            if (data.last_active) {
                const lastActiveTime = new Date(data.last_active).getTime();
                const currentTime = now;
                const secondsOffline = Math.floor((currentTime - lastActiveTime) / 1000);
                
                console.log('‚è∞ Offline time calculation:', {
                    lastActiveTime: data.last_active,
                    currentTime: new Date(now).toISOString(),
                    secondsOffline: secondsOffline,
                    currentEnergy: this.currentEnergy,
                    maxEnergy: this.maxEnergy,
                    profitPerClick: this.profitPerClick
                });
                
                if (secondsOffline > 0 && this.currentEnergy < this.maxEnergy) {
                    const energyToRestore = secondsOffline * this.profitPerClick;
                    const oldEnergy = this.currentEnergy;
                    this.currentEnergy = Math.min(this.maxEnergy, this.currentEnergy + energyToRestore);
                    
                    console.log('‚ö° Energy restored for offline time:', {
                        secondsOffline: secondsOffline,
                        energyRestored: this.currentEnergy - oldEnergy,
                        oldEnergy: oldEnergy,
                        newEnergy: this.currentEnergy,
                        maxEnergy: this.maxEnergy
                    });
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ –ë–î
                    if (this.userId && this.db) {
                        await this.db.updateEnergy(this.userId, this.currentEnergy, this.maxEnergy);
                    }
                } else {
                    console.log('‚ö° No energy restoration needed');
                }
            }

            // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º last_active —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—Ö–æ–¥–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
            this.setupExitHandlers();

            console.log('Set local balance to:', this.coins);
            console.log('Set energy to:', this.currentEnergy + '/' + this.maxEnergy);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º costume –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            const labubuImg = document.querySelector('.labubu_pic');
            if (labubuImg) {
                labubuImg.src = 'assets/images/' + this.costume;
            }
            // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.accessories) {
                console.log('Loading accessories:', data.accessories);
                
                const hatImg = document.getElementById('hat');
                const shoesImg = document.getElementById('shoes');
                const bagImg = document.getElementById('bag');
                
                console.log('Accessory elements found:', {
                    hat: !!hatImg,
                    shoes: !!shoesImg,
                    bag: !!bagImg
                });
                
                if (hatImg) {
                    if (data.accessories.hat) {
                        console.log('Setting hat:', data.accessories.hat);
                        hatImg.src = data.accessories.hat;
                        hatImg.style.display = 'block';
                        hatImg.onerror = () => console.error('Failed to load hat image:', data.accessories.hat);
                        hatImg.onload = () => console.log('Hat image loaded successfully');
                    } else {
                        console.log('No hat accessory found');
                        hatImg.style.display = 'none';
                    }
                }
                
                if (shoesImg) {
                    if (data.accessories.shoes) {
                        console.log('Setting shoes:', data.accessories.shoes);
                        shoesImg.src = data.accessories.shoes;
                        shoesImg.style.display = 'block';
                        shoesImg.onerror = () => console.error('Failed to load shoes image:', data.accessories.shoes);
                        shoesImg.onload = () => console.log('Shoes image loaded successfully');
                    } else {
                        console.log('No shoes accessory found');
                        shoesImg.style.display = 'none';
                    }
                }
                
                if (bagImg) {
                    if (data.accessories.bag) {
                        console.log('Setting bag:', data.accessories.bag);
                        bagImg.src = data.accessories.bag;
                        bagImg.style.display = 'block';
                        bagImg.onerror = () => console.error('Failed to load bag image:', data.accessories.bag);
                        bagImg.onload = () => console.log('Bag image loaded successfully');
                    } else {
                        console.log('No bag accessory found');
                        bagImg.style.display = 'none';
                    }
                }
            } else {
                console.log('No accessories data found');
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                const hatImg = document.getElementById('hat');
                const shoesImg = document.getElementById('shoes');
                const bagImg = document.getElementById('bag');
                if (hatImg) hatImg.style.display = 'none';
                if (shoesImg) shoesImg.style.display = 'none';
                if (bagImg) bagImg.style.display = 'none';
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –±—É—Å—Ç
            if (this.isBoostActive && this.boostTimeLeft <= 0) {
                this.isBoostActive = false;
            }
            
            // === –û—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥ ===
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥
            const shouldProcessOfflineIncome = data.last_active && new Date(data.last_active).getTime() < now;
            
            if (shouldProcessOfflineIncome) {
                await this.processOfflineIncome(data, timeData);
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_active
                console.log('First login or no offline income needed, updating last_active');
                const utcTime = timeData.serverTime.endsWith('Z') ? timeData.serverTime : timeData.serverTime + 'Z';
                await this.db.updateLastActive(this.userId, utcTime);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –≤ –æ–±—ä–µ–∫—Ç
            if (data.accessories) {
                if (typeof data.accessories === 'string') {
                    try {
                        this.accessories = JSON.parse(data.accessories);
                    } catch (e) {
                        console.error('Error parsing accessories JSON:', e);
                        this.accessories = {};
                    }
                } else {
                    this.accessories = data.accessories;
                }
            }

            // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            this.playerData.level = this.calculateLevel().level;
            this.playerData.referrals_count = data.referrals_count || 0;

            this.updateUI();
            
            // üîí –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            this.updateItemsAvailability();
            
            // üÜô –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            this.forceUpdateLevel();
            
            // üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            this.startOnlineIncome();
        }
    }
    
    // –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –æ—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    async processOfflineIncome(data, timeData) {
        try {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ last_active –≤ UTC —Ñ–æ—Ä–º–∞—Ç–µ
            const lastActiveStr = data.last_active.endsWith('Z') ? data.last_active : data.last_active + 'Z';
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            const serverDate = new Date(timeData.serverTime);
            const lastActiveDate = new Date(lastActiveStr);
            
            // –ü–æ–ª—É—á–∞–µ–º timestamp'—ã –≤ UTC
            const now = serverDate.getTime(); // serverTime —É–∂–µ –≤ UTC
            const lastActive = lastActiveDate.getTime(); // —Ç–µ–ø–µ—Ä—å lastActive —Ç–æ–∂–µ –≤ UTC
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            console.log('Offline income time debug:', {
                serverTime: timeData.serverTime,
                lastActive: lastActiveStr,
                diffMs: now - lastActive,
                diffMinutes: (now - lastActive) / (60 * 1000)
            });

            let diffMs = now - lastActive;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            if (diffMs < 0) {
                console.error('Negative time difference detected:', diffMs);
                return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–æ–ª—å—à–µ —Å—É—Ç–æ–∫)
            if (diffMs > 24 * 60 * 60 * 1000) {
                console.warn('Time difference more than 24 hours, limiting to 24 hours');
                diffMs = 24 * 60 * 60 * 1000;
            }
            
            let maxMs = 4 * 60 * 60 * 1000; // 4 —á–∞—Å–∞ –≤ –º—Å
            let earnMs = Math.min(diffMs, maxMs);

            console.log('Offline income calculation:', {
                diffMs,
                maxMs,
                earnMs,
                diffMinutes: Math.floor(diffMs / (60 * 1000)), // –æ–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –≤–Ω–∏–∑
                earnMinutes: Math.floor(earnMs / (60 * 1000))  // –æ–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –≤–Ω–∏–∑
            });

            if (earnMs > 60 * 1000) { // –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã
                let minutes = Math.floor(earnMs / (60 * 1000)); // –æ–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –≤–Ω–∏–∑
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π stableIncome –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                let earned = this.stableIncome * minutes;
                
                console.log('Offline reward calculation:', {
                    minutes,
                    stableIncome: this.stableIncome,
                    earned,
                    minutesRaw: earnMs / (60 * 1000),
                    currentBalance: this.coins
                });

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
                const popoutEarn = document.querySelector('.popout_earn');
                if (popoutEarn) {
                    popoutEarn.style.display = 'flex';
                    const earnCoinsSpan = document.getElementById('earn_coins');
                    if (earnCoinsSpan) earnCoinsSpan.textContent = this.formatNumber(earned);
                    const pickupBtn = document.getElementById('pickup_coins');
                    if (pickupBtn) {
                        pickupBtn.onclick = async () => {
                            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞
                            popoutEarn.classList.add('hidepopout');
                            setTimeout(async () => {
                                popoutEarn.style.display = 'none';
                                popoutEarn.classList.remove('hidepopout');
                                this.coins += earned;
                                console.log('Added offline income:', earned, 'New balance:', this.coins);
                                this.updateUI();
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ UTC
                                const utcTime = timeData.serverTime.endsWith('Z') ? timeData.serverTime : timeData.serverTime + 'Z';
                                await this.db.updateLastActive(this.userId, utcTime);
                                await this.db.updateBalance(this.userId, this.coins);
                            }, 1000);
                        };
                    }
                }
            } else {
                // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_active (–µ—Å–ª–∏ –¥–æ—Ö–æ–¥ –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è)
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ UTC
                const utcTime = timeData.serverTime.endsWith('Z') ? timeData.serverTime : timeData.serverTime + 'Z';
                await this.db.updateLastActive(this.userId, utcTime);
            }
        } catch (error) {
            console.error('Error in offline income calculation:', error);
        }
    }

    setupEventListeners() {
        // –ö–ª–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ .labubu_cont
        const labubuCont = document.querySelector('.labubu_cont');
        if (labubuCont) {
            labubuCont.addEventListener('click', () => this.handleClick());
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∞–ø–≥—Ä–µ–π–¥–∞
        document.querySelectorAll('.box_lb').forEach(card => {
            card.addEventListener('click', (e) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ .overflow_clothes (–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã)
                if (card.closest('.overflow_clothes')) {
                    // –≠—Ç–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä
                    this.selectedAccessory = {
                        id: card.dataset.id,
                        price: parseInt(card.dataset.price, 10),
                        stableIncome: parseInt(card.dataset.stableIncome, 10),
                        costume: card.dataset.costume || null,
                        category: card.dataset.category || '',
                        name: card.querySelector('.row_lb span')?.textContent + ' ' + (card.querySelector('.row_lb span:nth-child(2)')?.textContent || ''),
                        image: card.querySelector('img.absolute')?.src || card.dataset.image || ''
                    };
                    const popout = document.getElementById('popout_confirm_acces');
                    if (popout) {
                        popout.style.display = 'flex';
                        this.updatePopoutConfirmAcces();
                    }
                } else {
                    // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π suit - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                    const requirements = this.checkItemRequirements(card);
                    
                    if (!requirements.canBuy) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                        let message = '';
                        if (!requirements.hasLevel) {
                            message = `–¢—Ä–µ–±—É–µ—Ç—Å—è ${requirements.requiredLevel} —É—Ä–æ–≤–µ–Ω—å. –£ –≤–∞—Å ${requirements.playerLevel} —É—Ä–æ–≤–µ–Ω—å.`;
                        } else if (!requirements.hasReferrals) {
                            message = `–¢—Ä–µ–±—É–µ—Ç—Å—è ${requirements.requiredReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –£ –≤–∞—Å ${requirements.playerReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`;
                        }
                        
                        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å alert –∏–ª–∏ –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ–ø–∞–ø
                        alert(message);
                        return; // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –ø–æ–∫—É–ø–∫–∏
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
                    this.selectedCard = {
                        id: card.dataset.id,
                        price: parseInt(card.dataset.price, 10),
                        stableIncome: parseInt(card.dataset.stableIncome, 10),
                        costume: card.dataset.costume || null
                    };
                    document.getElementById('popout_confirm').style.display = 'flex';
                    this.updatePopoutConfirm();
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
        const buyBtn = document.getElementById('buy_button');
        if (buyBtn) {
            buyBtn.addEventListener('click', () => {
                this.handleBuyCard();
                const popout = document.getElementById('popout_confirm');
                if (popout) {
                    popout.classList.add('hidepopout');
                    setTimeout(() => {
                        popout.style.display = 'none';
                        popout.classList.remove('hidepopout');
                    }, 1000);
                }
            });
        }
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞
        const closeBtn = document.querySelector('.svg_close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                const popout = document.getElementById('popout_confirm');
                if (popout) {
                    popout.classList.add('hidepopout');
                    setTimeout(() => {
                        popout.style.display = 'none';
                        popout.classList.remove('hidepopout');
                    }, 1000);
                }
            });
        }
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
        const buyAccesBtn = document.querySelector('#popout_confirm_acces #buy_acces_button');
        if (buyAccesBtn) {
            buyAccesBtn.addEventListener('click', async () => {
                await this.handleBuyAccessory();
                const popout = document.getElementById('popout_confirm_acces');
                if (popout) {
                    popout.classList.add('hidepopout');
                    setTimeout(() => {
                        popout.style.display = 'none';
                        popout.classList.remove('hidepopout');
                    }, 1000);
                }
            });
        }
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
        const closeAccesBtn = document.querySelector('#popout_confirm_acces .svg_close');
        if (closeAccesBtn) {
            closeAccesBtn.addEventListener('click', () => {
                const popout = document.getElementById('popout_confirm_acces');
                if (popout) {
                    popout.classList.add('hidepopout');
                    setTimeout(() => {
                        popout.style.display = 'none';
                        popout.classList.remove('hidepopout');
                    }, 1000);
                }
            });
        }

        document.querySelectorAll('.ctg_cloth').forEach(btn => {
            btn.addEventListener('click', function() {
                // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                document.querySelectorAll('.ctg_cloth').forEach(b => b.classList.remove('selected_cloth_ctg'));
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                this.classList.add('selected_cloth_ctg');

                const category = this.querySelector('span').textContent.trim().toLowerCase();

                if (category === 'suit') {
                    document.querySelector('.overflow_u').style.display = '';
                    document.querySelector('.overflow_clothes').style.display = 'none';
                } else {
                    document.querySelector('.overflow_u').style.display = 'none';
                    document.querySelector('.overflow_clothes').style.display = '';
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ overflow_clothes
                    document.querySelectorAll('.overflow_clothes .box_lb').forEach(card => {
                        const id = card.dataset.id ? card.dataset.id.toLowerCase() : '';
                        if (id.includes(category)) {
                            card.parentElement.style.display = ''; // wrapper_lb
                        } else {
                            card.parentElement.style.display = 'none';
                        }
                    });
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ invite friends
        const inviteBtn = document.getElementById('invite_frinds');
        if (inviteBtn) {
            inviteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.shareReferralLink();
            });
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ Telegram
    async shareReferralLink() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            if (!this.userId || !this.db) {
                console.error('‚ùå User ID or database not available');
                return;
            }

            const playerData = await this.db.loadPlayerData(this.userId);
            if (!playerData || !playerData.referral_code) {
                console.error('‚ùå Player data or referral code not found');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            const botUsername = 'LabubuCoinBot'; // –ò–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            const referralUrl = `https://t.me/${botUsername}?start=ref_${playerData.referral_code}`;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            const message = `üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ LabubuCoin!
            
üöÄ –ù–∞–∂–∏–º–∞–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –ø–æ–∫—É–ø–∞–π –∞–ø–≥—Ä–µ–π–¥—ã!
üí∞ –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ!
            
${referralUrl}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram WebApp API
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralUrl)}&text=${encodeURIComponent(message)}`);
            } else {
                // Fallback: –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                navigator.clipboard.writeText(referralUrl).then(() => {
                    alert('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                }).catch(() => {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –∞–ª–µ—Ä—Ç–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:', referralUrl);
                });
            }

            console.log('üì§ Sharing referral link:', referralUrl);
        } catch (error) {
            console.error('‚ùå Error sharing referral link:', error);
        }
    }

    handleClick() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–ª–∏–∫–∞
        const energyCost = this.profitPerClick;
        if (this.currentEnergy < energyCost) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–ª–∏–∫–∞. –ù—É–∂–Ω–æ:', energyCost, '–ï—Å—Ç—å:', this.currentEnergy);
            this.showEnergyWarning();
            return;
        }

        // –†–∞—Å—Ö–æ–¥—É–µ–º energyCost –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ –∫–ª–∏–∫ (—Ä–∞–≤–Ω–æ profitPerClick)
        this.currentEnergy = Math.max(0, this.currentEnergy - energyCost);
        
        const profit = this.profitPerClick * (this.isBoostActive ? this.boost : 1);
        this.coins += profit;
        this.showProfitAnimation(profit);
        this.updateUI();
        this.saveGameData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
        if (this.userId && this.db) {
            this.db.updateLastActive(this.userId, new Date().toISOString());
        }
        
        console.log('handleClick: userId =', this.userId, 'coins =', this.coins, 'energy =', this.currentEnergy, 'spent =', energyCost);
        this.updateBalanceInDB();
        this.spawnRandomProfitSpan(profit);
        this.animateCircleBg();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —ç–Ω–µ—Ä–≥–∏–∏
    showEnergyWarning() {
        console.log(`‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ ${this.profitPerClick}, –µ—Å—Ç—å ${this.currentEnergy}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`);
        
        // –î–æ–±–∞–≤–∏–º –≤–∏–±—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.notificationOccurred('error');
        }
    }

    async handleBuyCard() {
        if (!this.selectedCard || !this.userId || !this.db) return;
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const data = await this.db.loadPlayerData(this.userId);
        if (!data) return;
        if (data.balance >= this.selectedCard.price) {
            // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º stable income
            this.coins = data.balance - this.selectedCard.price;
            this.stableIncome = (data.stable_income || 0) + this.selectedCard.stableIncome;
            
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ costume, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            if (this.selectedCard.costume) {
                this.costume = this.selectedCard.costume;
                const labubuImg = document.querySelector('.labubu_pic');
                if (labubuImg) {
                    labubuImg.src = 'assets/images/' + this.costume;
                }
            }
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î - –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            await this.db.updateBalance(this.userId, this.coins);
            await this.db.updateAccessoriesAndIncome(this.userId, undefined, this.stableIncome);
            
            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∫–æ—Å—Ç—é–º, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            if (this.selectedCard.costume) {
                await this.db.updateCostume(this.userId, this.costume);
            }
            
            this.updateUI();
            
            // üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥ —Å –Ω–æ–≤—ã–º stable_income
            this.restartOnlineIncome();
            
            this.hideCards();
            this.selectedCard = null;
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
            document.getElementById('popout_confirm').style.display = 'none';
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else {
            // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
        }
    }

    // –ü–æ–∫—É–ø–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    async handleBuyAccessory() {
        if (!this.selectedAccessory || !this.userId || !this.db) return;
        
        console.log('Buying accessory:', this.selectedAccessory);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const data = await this.db.loadPlayerData(this.userId);
        if (!data) return;
        
        if (data.balance >= this.selectedAccessory.price) {
            // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
            const newBalance = data.balance - this.selectedAccessory.price;
            
            // –£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ accessories
            let accessories = data.accessories;
            if (!accessories || typeof accessories !== 'object') {
                if (typeof accessories === 'string') {
                    try {
                        accessories = JSON.parse(accessories);
                        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –æ–±—ä–µ–∫—Ç ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                        if (!accessories || typeof accessories !== 'object') accessories = {};
                    } catch (e) {
                        console.error('Failed to parse accessories:', e);
                        accessories = {};
                    }
                } else {
                    accessories = {};
                }
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
            let category = '';
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ ID –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –∏–ª–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (this.selectedAccessory.id.includes('hat')) {
                category = 'hat';
            } else if (this.selectedAccessory.id.includes('shoes')) {
                category = 'shoes';
            } else if (this.selectedAccessory.id.includes('bag')) {
                category = 'bag';
            } else {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–∞
                const selectedCardElem = document.querySelector(`.box_lb[data-id='${this.selectedAccessory.id}']`);
                if (selectedCardElem) {
                    const lastSpan = selectedCardElem.querySelector('.row_lb span:last-child');
                    if (lastSpan) {
                        category = lastSpan.textContent.trim().toLowerCase();
                    }
                }
            }
            
            console.log('Determined category:', category);
            console.log('Accessory image:', this.selectedAccessory.image);
            
            if (!category) {
                console.error('Could not determine accessory category');
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞');
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä
            accessories[category] = this.selectedAccessory.image;
            this.accessories = accessories; // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
            this.stableIncome += this.selectedAccessory.stableIncome;
            
            console.log('Updated accessories:', accessories);
            console.log('Increased stable income by:', this.selectedAccessory.stableIncome);
            console.log('New stable income:', this.stableIncome);
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –ë–î
            await this.db.updateAccessoriesAndIncome(this.userId, accessories, this.stableIncome);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
            await this.db.updateBalance(this.userId, this.coins);
            
            this.updateUI();
            
            // üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥ —Å –Ω–æ–≤—ã–º stable_income
            this.restartOnlineIncome();
            
            // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
            this.displayAccessory(category, this.selectedAccessory.image);
            
            console.log('Accessory purchase completed successfully');
        } else {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
        }
    }
    
    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    displayAccessory(category, imagePath) {
        console.log(`Displaying ${category} accessory:`, imagePath);
        
        const element = document.getElementById(category);
        if (element) {
            element.src = imagePath;
            element.style.display = 'block';
            element.onerror = () => console.error(`Failed to load ${category} image:`, imagePath);
            element.onload = () => console.log(`${category} image loaded successfully`);
        } else {
            console.error(`Element with id '${category}' not found`);
        }
    }

    showProfitAnimation(profit) {
        const numbersCont = document.querySelector('.numbers_cont span');
        if (numbersCont) {
            numbersCont.textContent = `+${profit}`;
            numbersCont.style.opacity = '1';
            numbersCont.style.transform = 'scale(1.2)';
            
            setTimeout(() => {
                numbersCont.style.opacity = '0';
                numbersCont.style.transform = 'scale(1)';
            }, 1000);
        }
    }

    spawnRandomProfitSpan(profit) {
        const numbersCont = document.querySelector('.numbers_cont');
        if (numbersCont) {
            const span = document.createElement('span');
            span.textContent = `+${profit}`;
            span.style.position = 'absolute';
            // –†–∞–Ω–¥–æ–º–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–æ—Ç 10% –¥–æ 90%)
            span.style.left = `${10 + Math.random() * 80}%`;
            span.style.top = `${10 + Math.random() * 80}%`;
            // –†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ—Ç 5vw –¥–æ 10.3565vw
            const minFontSize = 5; // vw
            const maxFontSize = 10.3565; // vw
            const fontSize = minFontSize + Math.random() * (maxFontSize - minFontSize);
            span.style.fontSize = `${fontSize}vw`;
            span.style.pointerEvents = 'none';
            span.style.transition = 'opacity 0.8s, transform 0.8s';
            span.style.opacity = '1';
            span.style.transform = 'scale(1.2)';
            numbersCont.appendChild(span);
            setTimeout(() => {
                span.style.opacity = '0';
                span.style.transform = 'scale(1)';
            }, 150);
            setTimeout(() => {
                numbersCont.removeChild(span);
            }, 900);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    formatNumber(num) {
        if (num < 100) {
            return num.toFixed(2);
        } else if (num < 1000) {
            return num.toFixed(1);
        } else if (num < 1000000) {
            const formatted = (num / 1000).toFixed(1);
            return formatted.endsWith('.0') ? formatted.slice(0, -2) + '–ö' : formatted + '–ö';
        } else if (num < 1000000000) {
            const formatted = (num / 1000000).toFixed(1);
            return formatted.endsWith('.0') ? formatted.slice(0, -2) + '–ú' : formatted + '–ú';
        } else if (num < 1000000000000) {
            const formatted = (num / 1000000000).toFixed(1);
            return formatted.endsWith('.0') ? formatted.slice(0, -2) + '–ë' : formatted + '–ë';
        } else {
            const formatted = (num / 1000000000000).toFixed(1);
            return formatted.endsWith('.0') ? formatted.slice(0, -2) + '–¢' : formatted + '–¢';
        }
    }

    // –£–¥–∞–ª—è—é startIncomeTimer –ø–æ–ª–Ω–æ—Å—Ç—å—é

    updateUI() {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–ª–∞–Ω—Å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–ö, –ú, –ë, –¢)
        const balanceElement = document.querySelector('.flex_balance span');
        if (balanceElement) {
            balanceElement.textContent = this.formatNumber(this.coins);
        }

        const stableIncomeElement = document.querySelector('.flex_i span');
        if (stableIncomeElement) {
            stableIncomeElement.textContent = this.formatNumber(this.stableIncome);
        }

        const profitPerClickElement = document.querySelector('.flex_c span');
        if (profitPerClickElement) {
            profitPerClickElement.textContent = this.formatNumber(this.profitPerClick);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Å—Ç
        const boostElement = document.querySelector('.green_pannel .flex_i span');
        const boostTimeElement = document.querySelector('.green_pannel .box_icon');
        
        if (boostElement && boostTimeElement) {
            if (this.isBoostActive) {
                boostElement.textContent = `X${this.boost}`;
                boostTimeElement.textContent = this.formatTime(this.boostTimeLeft);
            } else {
                boostElement.textContent = 'X1';
                boostTimeElement.textContent = '00:00';
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        const energyElement = document.querySelector('.energy_text');
        if (energyElement) {
            energyElement.innerHTML = `${this.currentEnergy}<span class="energy_max">/${this.maxEnergy}</span>`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π
        this.updateLevelProgressBar();
    }



    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    activateBoost() {
        this.isBoostActive = true;
        this.boostTimeLeft = 900; // 15 –º–∏–Ω—É—Ç
        this.updateUI();
        this.saveGameData();
    }

    saveGameData() {
        if (!this.userId || !this.db) return;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —ç–Ω–µ—Ä–≥–∏—é
        this.db.updateBalance(this.userId, this.coins);
        this.db.updateEnergy(this.userId, this.currentEnergy, this.maxEnergy);
        
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –±—É—Å—Ç, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // –ù–æ –ø–æ–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –±—É—Å—Ç —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ
    }

    loadGameData() {
        // –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç—É —Å localStorage, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∏–∑ –ë–î
    }

    async updateBalanceInDB() {
        if (!this.userId) {
            console.warn('updateBalanceInDB: userId is null!');
            return;
        }
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            const result = await this.db.updateBalance(this.userId, this.coins);
            console.log('updateBalanceInDB: success =', result);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î:', e);
        }
    }

    randomizeLabubuPosition() {
        const labubuCont = document.querySelector('.labubu_cont');
        if (labubuCont) {
            // –†–∞–Ω–¥–æ–º–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: left –∏ top –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5vw/¬±5vh
            const randLeft = (Math.random() - 0.5) * 10; // –æ—Ç -5 –¥–æ +5
            const randTop = (Math.random() - 0.5) * 10;  // –æ—Ç -5 –¥–æ +5
            labubuCont.style.position = 'relative';
            labubuCont.style.left = `${randLeft}vw`;
            labubuCont.style.top = `${randTop}vh`;
        }
    }

    animateCircleBg() {
        const circleBg = document.querySelector('.circle_bg');
        if (circleBg) {
            circleBg.style.transform = 'scale(0.9) translateZ(0)';
            setTimeout(() => {
                circleBg.style.transform = 'scale(1) translateZ(0)';
            }, 50);
        }
    }

    async renderTopPlayers() {
        if (!this.db) return;
        const topPlayers = await this.db.getTopPlayers(10);
        let currentUser = null;
        if (this.userId) {
            currentUser = await this.db.loadPlayerData(this.userId);
        }
        const list = document.getElementById('top_players_list');
        if (!list) return;
        list.innerHTML = '';
        // –†–µ–Ω–¥–µ—Ä —Ç–æ–ø-10
        topPlayers.forEach((player, idx) => {
            const medalClass = idx === 0 ? 'gold_pannel' : idx === 1 ? 'silver_pannel' : idx === 2 ? 'bronze_pannel' : '';
            list.innerHTML += `
                <div class="pannel_top w100 space alcn ${medalClass}">
                    <div class="numb_pos">#${idx + 1}</div>
                    <div class="left_top alcn">
                        <img src="assets/images/${player.costume || ''}" alt="">
                        <div class="row_top clmn">
                            <span>Username:</span>
                            <span>${player.username ? '@' + player.username : 'Player'}</span>
                        </div>
                    </div>
                    <div class="right_top alcn">
                        <div class="row_top_right coins_row clmn">
                            <span>Coins:</span>
                            <span>${this.formatNumber(player.balance)}</span>
                        </div>
                        <div class="row_top_right stableincome_row clmn">
                            <span>Stable income:</span>
                            <span>+${this.formatNumber(player.stable_income)}</span>
                        </div>
                        <div class="row_top_right referals_row clmn">
                            <span>Referals:</span>
                            <span>${player.referals || 0}</span>
                        </div>
                    </div>
                </div>
            `;
        });
        // –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ç–æ–ø-10
        if (currentUser && !topPlayers.some(p => p.tg_id == currentUser.tg_id)) {
            list.innerHTML += `
                <div class="pannel_top w100 space alcn">
                    <div class="numb_pos">You</div>
                    <div class="left_top alcn">
                        <img src="assets/images/${currentUser.costume || ''}" alt="">
                        <div class="row_top clmn">
                            <span>Username:</span>
                            <span>${currentUser.username ? '@' + currentUser.username : 'Player'}</span>
                        </div>
                    </div>
                    <div class="right_top alcn">
                        <div class="row_top_right coins_row clmn">
                            <span>Coins:</span>
                            <span>${this.formatNumber(currentUser.balance)}</span>
                        </div>
                        <div class="row_top_right stableincome_row clmn">
                            <span>Stable income:</span>
                            <span>+${this.formatNumber(currentUser.stable_income)}</span>
                        </div>
                        <div class="row_top_right referals_row clmn">
                            <span>Referals:</span>
                            <span>${currentUser.referals || 0}</span>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞–Ω–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞
    renderReferralRanks() {
        if (!this.levelsConfig || !this.levelsConfig.ranks) {
            console.log('‚ùå Levels config not available for referral ranks');
            return;
        }

        const container = document.querySelector('.overflow_levels');
        if (!container) {
            console.log('‚ùå Referral ranks container not found');
            return;
        }

        console.log('üéØ Rendering referral ranks...');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–≥–∞
        const ranksHTML = this.levelsConfig.ranks.map((rank, index) => {
            const playerReward = rank.reward * 2; // –ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–π
            const referralReward = rank.reward;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSS –∫–ª–∞—Å—Å –ø–∞–Ω–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞
            let panelClass = 'bronze_referal';
            if (rank.id.includes('silver')) panelClass = 'silver_referal';
            else if (rank.id.includes('gold')) panelClass = 'gold_referal';
            else if (rank.id.includes('platinum')) panelClass = 'platinum_referal';
            else if (rank.id.includes('diamond')) panelClass = 'diamond_referal';
            else if (rank.id.includes('master')) panelClass = 'master_referal';
            else if (rank.id.includes('grandmaster')) panelClass = 'grandmaster_referal';
            else if (rank.id.includes('legend')) panelClass = 'legend_referal';

            return `
                <div class="pannel_referal ${panelClass} w100 alcn" data-rank-id="${rank.id}">
                    <div class="left_ref alcn">
                        <div class="circ_ref jlcn">#${index + 1}</div>
                        <span>${rank.name}</span>
                    </div>
                    <div class="right_ref alcn">
                        <div class="wrapper_ref forfriend alcn">
                            <img src="assets/images/logo.png" alt="">
                            <span>+${this.formatNumber(referralReward)}</span>
                        </div>
                        <div class="wrapper_ref forme alcn">
                            <img src="assets/images/logo.png" alt="">
                            <span>+${this.formatNumber(playerReward)}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = ranksHTML;
        console.log(`‚úÖ Rendered ${this.levelsConfig.ranks.length} referral ranks`);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–≥—Ä–æ–∫–∞
    async renderPlayerReferrals() {
        if (!this.userId || !this.db) return;

        try {
            const referrals = await this.db.getPlayerReferrals(this.userId);
            const container = document.querySelector('.overflow_friends');
            
            if (!container) {
                console.error('‚ùå Container .overflow_friends not found');
                return;
            }

            if (referrals.length === 0) {
                container.innerHTML = `
                    <div class="no_referrals w100 alcn" style="padding: 20px; text-align: center; color: #999;">
                        <span></span>
                        <br>
                        <small></small>
                    </div>
                `;
                return;
            }

            const referralsHTML = referrals.map((referral, index) => {
                const username = referral.username ? `@${referral.username}` : `User ${referral.tg_id}`;
                const balance = this.formatNumber(referral.balance || 0);
                const level = referral.player_level || 1;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é
                const rank = this.levelsConfig.getRankByLevel(level);
                const rankName = rank ? rank.name : 'Bronze 1';
                
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                const reward = this.calculateReferralReward(referral.balance || 0);

                return `
                    <div class="pannel_friend w100 alcn">
                        <div class="l_friend alcn">
                            <img class="avatar_friend" src="assets/images/labubu.png" alt="">
                            <div class="row_friend clmn">
                                <span class="name_friend">${username}</span>
                                <div class="flex_friend alcn">
                                    <span class="rang_friend">${rankName}</span>
                                    <div class="balance_friend alcn">
                                        <img src="assets/images/logo.png" alt="">
                                        <span>${balance}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="r_friend alcn">
                            <img src="assets/images/logo.png" alt="">
                            <span>+${this.formatNumber(reward)}</span>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = referralsHTML;
            console.log(`‚úÖ Rendered ${referrals.length} player referrals`);
        } catch (error) {
            console.error('‚ùå Error rendering player referrals:', error);
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    calculateReferralReward(referralBalance) {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–Ω–≥ –ø–æ –±–∞–ª–∞–Ω—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const rank = this.levelsConfig.getRankByCoins(referralBalance);
        return rank ? rank.reward * 2 : 200; // –£–¥–≤–æ–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    }

    // –î–æ–±–∞–≤–ª—è—é –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∫–∏–Ω–æ–º
    updatePopoutConfirm() {
        const popout = document.getElementById('popout_confirm');
        if (!popout || !this.selectedCard) return;
        // –ö–∞—Ä—Ç–∏–Ω–∫–∞
        const img = popout.querySelector('.box_lb img');
        if (img && this.selectedCard.costume) {
            img.src = 'assets/images/' + this.selectedCard.costume;
        }
        // –ù–∞–∑–≤–∞–Ω–∏–µ
        const nameSpans = popout.querySelectorAll('.box_lb .row_lb span');
        if (nameSpans.length >= 2) {
            const parts = this.selectedCard.id.split('_');
            nameSpans[0].textContent = parts[0] ? this.capitalize(parts[0]) : '';
            nameSpans[1].textContent = parts[1] ? this.capitalize(parts[1]) : '';
        }
        // Stable income
        const stableIncomeSpan = popout.querySelector('.box_lb .row_profit_lb .flex_i span');
        if (stableIncomeSpan) {
            stableIncomeSpan.textContent = '+' + this.formatNumber(this.selectedCard.stableIncome);
        }
        // –¶–µ–Ω–∞
        const priceSpan = popout.querySelector('.price_pannel .pr_wrapper span');
        if (priceSpan) {
            priceSpan.textContent = this.formatNumber(this.selectedCard.price);
        }
        // –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞ box_lb ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        const box = popout.querySelector('.box_lb');
        const selectedCardElem = document.querySelector(`.box_lb[data-id='${this.selectedCard.id}']`);
        if (box && selectedCardElem) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å clmn
            box.className = 'box_lb clmn';
            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∫—Ä–æ–º–µ box_lb –∏ clmn
            selectedCardElem.classList.forEach(cls => {
                if (cls !== 'box_lb' && cls !== 'clmn') {
                    box.classList.add(cls);
                }
            });
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø–∞–ø–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    updatePopoutConfirmAcces() {
        const popout = document.getElementById('popout_confirm_acces');
        if (!popout || !this.selectedAccessory) return;
        // –ù–ï –º–µ–Ω—è–µ–º src —É –æ–±—ã—á–Ω–æ–≥–æ img!
        // –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É img.absolute
        const absImg = popout.querySelector('.box_lb img.absolute');
        if (absImg && this.selectedAccessory.image) {
            absImg.src = this.selectedAccessory.image;
            absImg.style.display = '';
        }
        // –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        const selectedCardElem = document.querySelector(`.box_lb[data-id='${this.selectedAccessory.id}']`);
        const nameSpans = popout.querySelectorAll('.box_lb .row_lb span');
        if (selectedCardElem) {
            const cardNameSpans = selectedCardElem.querySelectorAll('.row_lb span');
            if (nameSpans.length >= 2 && cardNameSpans.length >= 2) {
                nameSpans[0].textContent = cardNameSpans[0].textContent;
                nameSpans[1].textContent = cardNameSpans[1].textContent;
            }
        } else if (nameSpans.length >= 2) {
            // fallback: —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
            const parts = this.selectedAccessory.name.split(' ');
            nameSpans[0].textContent = parts[0] || '';
            nameSpans[1].textContent = parts.slice(1).join(' ') || '';
        }
        // Stable income
        const stableIncomeSpan = popout.querySelector('.box_lb .row_profit_lb .flex_i span');
        if (stableIncomeSpan) {
            stableIncomeSpan.textContent = '+' + this.formatNumber(this.selectedAccessory.stableIncome);
        }
        // –¶–µ–Ω–∞
        const priceSpan = popout.querySelector('.price_pannel .pr_wrapper span');
        if (priceSpan) {
            priceSpan.textContent = this.formatNumber(this.selectedAccessory.price);
        }
        // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ (absolute)
        const absImg2 = popout.querySelector('.box_lb img.absolute');
        if (absImg2 && this.selectedAccessory.image) {
            absImg2.src = this.selectedAccessory.image;
            absImg2.style.display = '';
        }
        // –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞ box_lb
        const box = popout.querySelector('.box_lb');
        if (box && selectedCardElem) {
            box.className = 'box_lb clmn';
            selectedCardElem.classList.forEach(cls => {
                if (cls !== 'box_lb' && cls !== 'clmn') {
                    box.classList.add(cls);
                }
            });
        }
    }
    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    debugAccessories() {
        console.log('=== ACCESSORIES DEBUG ===');
        console.log('Game accessories:', this.accessories);
        
        const hatImg = document.getElementById('hat');
        const shoesImg = document.getElementById('shoes');
        const bagImg = document.getElementById('bag');
        
        console.log('DOM elements:', {
            hat: hatImg ? { src: hatImg.src, display: hatImg.style.display, visible: hatImg.offsetHeight > 0 } : 'NOT FOUND',
            shoes: shoesImg ? { src: shoesImg.src, display: shoesImg.style.display, visible: shoesImg.offsetHeight > 0 } : 'NOT FOUND',
            bag: bagImg ? { src: bagImg.src, display: bagImg.style.display, visible: bagImg.offsetHeight > 0 } : 'NOT FOUND'
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        if (this.userId && this.db) {
            this.db.loadPlayerData(this.userId).then(data => {
                console.log('DB accessories data:', data ? data.accessories : 'NO DATA');
                if (data && data.accessories) {
                    if (typeof data.accessories === 'string') {
                        try {
                            const parsed = JSON.parse(data.accessories);
                            console.log('Parsed DB accessories:', parsed);
                        } catch (e) {
                            console.error('Failed to parse DB accessories:', e);
                        }
                    }
                }
            });
        }
        
        console.log('=== END DEBUG ===');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    forceRefreshAccessories() {
        console.log('Force refreshing accessories...');
        if (this.accessories && typeof this.accessories === 'object') {
            Object.keys(this.accessories).forEach(category => {
                const imagePath = this.accessories[category];
                if (imagePath) {
                    this.displayAccessory(category, imagePath);
                }
            });
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    async debugBalance() {
        console.log('=== BALANCE DEBUG ===');
        console.log('Current local balance (this.coins):', this.coins);
        console.log('UserId:', this.userId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        if (this.userId && this.db) {
            const data = await this.db.loadPlayerData(this.userId);
            console.log('DB balance data:', data ? data.balance : 'NO DATA');
            console.log('Full DB data:', data);
            
            if (data && data.balance !== this.coins) {
                console.warn('‚ö†Ô∏è BALANCE MISMATCH!');
                console.warn('Local coins:', this.coins);
                console.warn('DB balance:', data.balance);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç UI
        const balanceElement = document.querySelector('.flex_balance span');
        if (balanceElement) {
            console.log('UI shows:', balanceElement.textContent);
        }
        
        console.log('=== END BALANCE DEBUG ===');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –ë–î
    async forceSyncBalance() {
        console.log('Force syncing balance with DB...');
        if (this.userId && this.db) {
            const data = await this.db.loadPlayerData(this.userId);
            if (data) {
                console.log('DB balance:', data.balance);
                this.coins = data.balance || 0;
                console.log('Set local balance to:', this.coins);
                this.updateUI();
                console.log('Balance synced successfully');
            } else {
                console.error('No data found in DB');
            }
        } else {
            console.error('UserId or DB not available');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ stable_income
    async debugStableIncome() {
        console.log('=== STABLE INCOME DEBUG ===');
        console.log('Current local stable_income (this.stableIncome):', this.stableIncome);
        console.log('UserId:', this.userId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        if (this.userId && this.db) {
            const data = await this.db.loadPlayerData(this.userId);
            console.log('DB stable_income data:', data ? data.stable_income : 'NO DATA');
            console.log('Full DB data:', data);
            
            if (data && data.stable_income !== this.stableIncome) {
                console.warn('‚ö†Ô∏è STABLE INCOME MISMATCH!');
                console.warn('Local stableIncome:', this.stableIncome);
                console.warn('DB stable_income:', data.stable_income);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç UI
        const stableIncomeElement = document.querySelector('.flex_i span');
        if (stableIncomeElement) {
            console.log('UI shows stable income:', stableIncomeElement.textContent);
        }
        
        console.log('=== END STABLE INCOME DEBUG ===');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ stable_income —Å –ë–î
    async forceSyncStableIncome() {
        console.log('Force syncing stable_income with DB...');
        if (this.userId && this.db) {
            const data = await this.db.loadPlayerData(this.userId);
            if (data) {
                console.log('DB stable_income:', data.stable_income);
                this.stableIncome = data.stable_income || 3.65;
                console.log('Set local stable_income to:', this.stableIncome);
                this.updateUI();
                console.log('Stable income synced successfully');
                
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                this.restartOnlineIncome();
            } else {
                console.error('No data found in DB');
            }
        } else {
            console.error('UserId or DB not available');
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞
    startOnlineIncome() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        this.stopOnlineIncome();
        
        if (this.stableIncome <= 0) {
            console.log('Stable income is 0, not starting online income');
            return;
        }
        
        console.log('üöÄ Starting online income:', this.stableIncome, 'per minute');
        
        // –î–æ—Ö–æ–¥ –∑–∞ —Å–µ–∫—É–Ω–¥—É = stable_income / 60
        const incomePerSecond = this.stableIncome / 60;
        
        this.onlineIncomeInterval = setInterval(() => {
            if (this.isOnline && this.stableIncome > 0) {
                const oldCoins = this.coins;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –∑–∞ —Å–µ–∫—É–Ω–¥—É
                this.coins += incomePerSecond;
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é (profitPerClick –µ–¥–∏–Ω–∏—Ü –≤ —Å–µ–∫—É–Ω–¥—É)
                if (this.currentEnergy < this.maxEnergy) {
                    this.currentEnergy = Math.min(this.maxEnergy, this.currentEnergy + this.profitPerClick);
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–µ –∑–∞—Å–æ—Ä–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
                if (Math.floor(Date.now() / 1000) % 10 === 0) {
                    console.log('üí∞ Online income & ‚ö° Energy regen:', {
                        coinsBefore: oldCoins.toFixed(4),
                        coinsAdded: incomePerSecond.toFixed(4),
                        coinsAfter: this.coins.toFixed(4),
                        energy: `${this.currentEnergy}/${this.maxEnergy}`,
                        energyRegen: this.profitPerClick,
                        stableIncomePerMin: this.stableIncome
                    });
                }
                
                this.updateUI();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã–ª–æ 30)
                const now = Date.now();
                const timeSinceLastSave = now - this.lastOnlineIncomeSave;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if (Math.floor(Date.now() / 1000) % 5 === 0) {
                    console.log('‚è∞ Save check:', {
                        timeSinceLastSave: Math.floor(timeSinceLastSave / 1000) + 's',
                        shouldSave: timeSinceLastSave > 10000, // –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
                        userId: this.userId,
                        hasDb: !!this.db,
                        currentBalance: this.coins.toFixed(4)
                    });
                }
                
                if (timeSinceLastSave > 10000) { // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    console.log('üíæ Attempting to save online income to DB:', this.coins.toFixed(4));
                    console.log('üìã Save details:', {
                        userId: this.userId,
                        userIdType: typeof this.userId,
                        coins: this.coins,
                        db: !!this.db,
                        dbSupabase: !!(this.db && this.db.supabase)
                    });
                    
                    if (this.userId && this.db) {
                        try {
                            this.db.updateBalance(this.userId, this.coins).then(result => {
                                console.log('‚úÖ Save result:', result);
                                this.lastOnlineIncomeSave = now;
                            }).catch(error => {
                                console.error('‚ùå Save error:', error);
                            });
                        } catch (error) {
                            console.error('‚ùå Save error:', error);
                        }
                    } else {
                        console.error('‚ùå Cannot save: userId or db missing', {
                            userId: this.userId,
                            db: !!this.db
                        });
                    }
                }
            }
        }, 1000); // –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        console.log('‚úÖ Online income started!');
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞
    stopOnlineIncome() {
        if (this.onlineIncomeInterval) {
            clearInterval(this.onlineIncomeInterval);
            this.onlineIncomeInterval = null;
            console.log('‚èπÔ∏è Online income stopped');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if (this.userId && this.db) {
                console.log('üíæ Saving final balance on stop:', this.coins.toFixed(4));
                this.db.updateBalance(this.userId, this.coins).then(result => {
                    console.log('‚úÖ Final balance saved:', result);
                }).catch(error => {
                    console.error('‚ùå Error saving final balance:', error);
                });
            }
        }
    }
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞ (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ stable_income)
    restartOnlineIncome() {
        console.log('üîÑ Restarting online income...');
        this.stopOnlineIncome();
        this.startOnlineIncome();
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω
    setOnlineStatus(isOnline) {
        console.log('Setting online status:', isOnline);
        this.isOnline = isOnline;
        
        if (isOnline) {
            this.startOnlineIncome();
        } else {
            this.stopOnlineIncome();
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î
    async forceSaveBalance() {
        console.log('üîÑ Force saving balance to DB...');
        console.log('Current balance:', this.coins);
        console.log('UserId:', this.userId);
        console.log('DB available:', !!this.db);
        
        if (this.userId && this.db) {
            try {
                const result = await this.db.updateBalance(this.userId, this.coins);
                console.log('‚úÖ Force save result:', result);
                return result;
            } catch (error) {
                console.error('‚ùå Force save error:', error);
                return false;
            }
        } else {
            console.error('‚ùå Cannot force save: userId or db missing');
            return false;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞
    debugOnlineIncome() {
        console.log('=== ONLINE INCOME DEBUG ===');
        console.log('Online status:', this.isOnline);
        console.log('Stable income per minute:', this.stableIncome);
        console.log('Income per second:', this.stableIncome / 60);
        console.log('Interval active:', !!this.onlineIncomeInterval);
        console.log('Last save time:', new Date(this.lastOnlineIncomeSave).toLocaleString());
        console.log('Time since last save:', Math.floor((Date.now() - this.lastOnlineIncomeSave) / 1000), 'seconds');
        console.log('Current balance:', this.coins);
        
        if (this.onlineIncomeInterval) {
            console.log('‚úÖ Online income is RUNNING');
        } else {
            console.log('‚ùå Online income is STOPPED');
        }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º)
    forceUpdateLevel() {
        if (!this.levelsConfig) {
            console.log('‚è≥ Levels config not ready, will retry in 1 second...');
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                this.forceUpdateLevel();
            }, 1000);
            return;
        }
        
        const levelData = this.calculateLevel();
        const oldLevel = this.currentLevel;
        
        console.log('üîÑ Force updating level:', {
            currentBalance: this.coins,
            oldLevel: oldLevel,
            newLevel: levelData.level,
            changed: oldLevel !== levelData.level
        });
        
        if (oldLevel !== levelData.level) {
            console.log('üÜô Level needs update:', oldLevel, '‚Üí', levelData.level);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î
            if (this.userId && this.db) {
                this.saveLevelToDB(levelData.level);
            } else {
                // –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
                this.currentLevel = levelData.level;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateLevelProgressBar();
            
            // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
            this.playerData.level = levelData.level;
            this.updateItemsAvailability();
            
            console.log('‚úÖ Level force updated successfully');
        } else {
            console.log('‚úÖ Level is already up to date');
            // –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            this.updateLevelProgressBar();
            
            // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            this.playerData.level = levelData.level;
            this.updateItemsAvailability();
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
    setupExitHandlers() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ
        if (!this.exitHandlersSetup) {
            this.exitHandlersSetup = true;
            console.log('üîß Setting up exit handlers for energy saving');
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
            const saveEnergyOnBlur = async () => {
                if (this.userId && this.db) {
                    console.log('üíæ Saving energy and last_active on window blur');
                    await this.db.updateEnergy(this.userId, this.currentEnergy, this.maxEnergy);
                    await this.db.updateLastActive(this.userId, new Date().toISOString());
                }
            };
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
            const saveEnergyOnHidden = async () => {
                if (document.hidden && this.userId && this.db) {
                    console.log('üíæ Saving energy and last_active on tab hide');
                    await this.db.updateEnergy(this.userId, this.currentEnergy, this.maxEnergy);
                    await this.db.updateLastActive(this.userId, new Date().toISOString());
                }
            };
            
            window.addEventListener('blur', saveEnergyOnBlur);
            document.addEventListener('visibilitychange', saveEnergyOnHidden);
        }
    }
}


// === –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É–∂–∫–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ ===
function randomizeCircle(circle, areaW, areaH) {
  const size = 120;
  const left = Math.random() * (areaW - size);
  const top = Math.random() * (areaH - size);
  const scale = 0.7 + Math.random() * 0.7;
  const opacity = 0.3 + Math.random() * 0.5;
  circle.style.left = left + 'px';
  circle.style.top = top + 'px';
  circle.style.transform = `scale(${scale})`;
  circle.style.opacity = opacity;
}

function animateCircles() {
  const area = document.querySelector('.bg_animation');
  if (!area) return;
  const areaW = area.offsetWidth;
  const areaH = area.offsetHeight;
  const circles = [
    document.querySelector('.circle_first'),
    document.querySelector('.circle_second'),
    document.querySelector('.circle_third'),
    document.querySelector('.circle_four'),
    document.querySelector('.circle_five')
  ];
  circles.forEach(circle => {
    if (circle) randomizeCircle(circle, areaW, areaH);
  });
}

// üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –∏ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('‚è≥ DOM loaded, waiting for video/media resources...');
    await new Promise(resolve => setTimeout(resolve, 600));
    
    window.labubuGame = new LabubuGame();
    console.log('üéÆ LabubuCoin Game –∑–∞–ø—É—â–µ–Ω–∞!');
    setInterval(animateCircles, 2000);
    animateCircles();
    // renderAccessories(); // —É–±—Ä–∞–Ω–æ, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
    window.debugAccessories = () => window.labubuGame.debugAccessories();
    window.forceRefreshAccessories = () => window.labubuGame.forceRefreshAccessories();
    window.debugBalance = () => window.labubuGame.debugBalance();
    window.forceSyncBalance = () => window.labubuGame.forceSyncBalance();
    window.debugStableIncome = () => window.labubuGame.debugStableIncome();
    window.forceSyncStableIncome = () => window.labubuGame.forceSyncStableIncome();
    window.startOnlineIncome = () => window.labubuGame.startOnlineIncome();
    window.stopOnlineIncome = () => window.labubuGame.stopOnlineIncome();
    window.setOnlineStatus = (status) => window.labubuGame.setOnlineStatus(status);
    window.debugOnlineIncome = () => window.labubuGame.debugOnlineIncome();
    window.forceSaveBalance = () => window.labubuGame.forceSaveBalance();
    window.forceUpdateLevel = () => window.labubuGame.forceUpdateLevel();
    window.renderReferralRanks = () => window.labubuGame.renderReferralRanks();
    
    // üîí –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    window.debugRequirements = () => {
        const game = window.labubuGame;
        console.log('=== REQUIREMENTS DEBUG ===');
        console.log('Player Data:', game.playerData);
        
        const allItems = document.querySelectorAll('.box_lb[data-required-level]');
        allItems.forEach(item => {
            const requirements = game.checkItemRequirements(item);
            console.log(`Item ${item.dataset.id}:`, requirements);
        });
    };
    
    window.testRequirements = (level = 5, referrals = 3) => {
        const game = window.labubuGame;
        console.log(`üß™ Testing with level=${level}, referrals=${referrals}`);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        game.playerData.level = level;
        game.playerData.referrals_count = referrals;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        game.updateItemsAvailability();
        
        console.log('‚úÖ Requirements updated. Check the cards in the upgrade page.');
        console.log('To restore real data, reload the page or call window.labubuGame.updateItemsAvailability()');
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π/—Å—Ç—Ä–∞–Ω–∏—Ü
    console.log('üîÑ Setting up category switchers...');
    document.querySelectorAll('.ctg_wrap, #upgrade_buttton_page').forEach(btn => {
        btn.addEventListener('click', function() {
            console.log('Category button clicked:', this.dataset.target);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ data-target
            if (!this.dataset.target) {
                console.log('No data-target found, skipping');
                return;
            }
                
            // –°–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.querySelectorAll('.main_page, .upgrade_page, .top_page, .referal_page').forEach(page => {
                page.style.display = 'none';
            });
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const target = this.dataset.target;
            const page = document.querySelector('.' + target);
            if (page) {
                page.style.display = '';
                console.log('Showing page:', target);
            } else {
                console.log('Page not found:', target);
            }
            
            // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
            document.querySelectorAll('.ctg_wrap').forEach(b => b.classList.remove('selected_ctg'));
            this.classList.add('selected_ctg');
        });
    });
    console.log('‚úÖ Category switchers setup complete');
    
    // –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
    window.debugLevels = () => {
        const game = window.labubuGame;
        if (!game.levelsConfig) {
            console.log('‚ùå Levels config not loaded yet');
            return;
        }
        
        const levelData = game.calculateLevel();
        const rankInfo = game.levelsConfig.getRankByCoins(game.coins);
        
        console.log('=== LEVELS DEBUG ===');
        console.log('Current balance (XP):', game.coins);
        console.log('Current level:', levelData.level);
        console.log('Progress:', levelData.progress.toFixed(2) + '%');
        console.log('XP to next level:', levelData.xpToNextLevel);
        console.log('Rank:', rankInfo.name, rankInfo.icon);
        console.log('Title:', levelData.levelInfo?.title);
        console.log('Level info:', levelData.levelInfo);
        console.log('Level requirements (first 10):', game.levelsConfig.levels.slice(0, 10));
        console.log('=== END LEVELS DEBUG ===');
    };
    
    window.setTestBalance = (amount) => {
        const game = window.labubuGame;
        game.coins = amount;
        game.updateUI();
        console.log('üí∞ Set test balance to:', amount);
        if (game.userId && game.db) {
            game.db.updateBalance(game.userId, amount);
        }
    };
    
    window.testLevelProgression = () => {
        const testBalances = [0, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 25000, 50000, 100000];
        let index = 0;
        
        const testNext = () => {
            if (index < testBalances.length) {
                window.setTestBalance(testBalances[index]);
                window.debugLevels();
                index++;
                setTimeout(testNext, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            } else {
                console.log('üèÅ Level progression test completed!');
            }
        };
        
        console.log('üß™ Starting level progression test...');
        testNext();
    };
    
    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ —É—Ä–æ–≤–Ω–µ–π
    window.showLevelsConfig = () => {
        if (!window.LevelsConfig) {
            console.log('‚ùå Levels config not available');
            return;
        }
        
        console.log('=== LEVELS CONFIG ===');
        console.log('Total levels:', window.LevelsConfig.levels.length);
        console.log('Total ranks:', window.LevelsConfig.ranks.length);
        console.log('Max XP needed:', window.LevelsConfig.levels[window.LevelsConfig.levels.length - 1]?.totalXpRequired);
        console.log('Max coins for highest rank:', window.LevelsConfig.ranks[window.LevelsConfig.ranks.length - 1]?.requiredCoins);
        console.log('First 20 levels:', window.LevelsConfig.levels.slice(0, 20));
        console.log('Last 10 levels:', window.LevelsConfig.levels.slice(-10));
        console.log('=== END CONFIG ===');
    };
    
    window.showRanksInfo = () => {
        if (!window.LevelsConfig) {
            console.log('‚ùå Levels config not available');
            return;
        }
        
        console.log('=== RANKS INFO ===');
        window.LevelsConfig.ranks.forEach((rank, index) => {
            console.log(`${index + 1}. ${rank.icon} ${rank.name}:`, {
                requiredCoins: rank.requiredCoins.toLocaleString(),
                reward: rank.reward,
                color: rank.color,
                description: rank.description
            });
        });
        console.log('=== END RANKS ===');
    };
    
    window.findLevelByXP = (xp) => {
        if (!window.LevelsConfig) {
            console.log('‚ùå Levels config not available');
            return;
        }
        
        const level = window.LevelsConfig.getLevelByTotalXP(xp);
        const progress = window.LevelsConfig.getLevelProgress(xp);
        const levelInfo = window.LevelsConfig.getLevelInfo(level);
        const rankInfo = window.LevelsConfig.getRankByCoins(xp);
        const rankProgress = window.LevelsConfig.getRankProgress(xp);
        
        console.log(`üí∞ XP/Coins: ${xp} ‚Üí Level: ${level}`);
        console.log(`üèÜ ${rankInfo.icon} ${rankInfo.name} - ${levelInfo?.title}`);
        console.log(`üìä Rank progress: ${rankProgress.toFixed(1)}%`);
        console.log(`üìä Progress: ${progress.toFixed(2)}%`);
        console.log(`üìà Level info:`, levelInfo);
    };
    
    console.log('üîß Debug functions available:');
    console.log('- debugAccessories() - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞—Ö');
    console.log('- forceRefreshAccessories() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤');
    console.log('- debugBalance() - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ');
    console.log('- forceSyncBalance() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å –ë–î');
    console.log('- debugStableIncome() - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ stable_income');
    console.log('- forceSyncStableIncome() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å stable_income —Å –ë–î');
    console.log('- startOnlineIncome() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞');
    console.log('- stopOnlineIncome() - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞');
    console.log('- setOnlineStatus(true/false) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω');
    console.log('- debugOnlineIncome() - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞');
    console.log('- forceSaveBalance() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î');
    console.log('- forceUpdateLevel() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å');
    console.log('- testLevelsDisplay() - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π');
    console.log('- renderReferralRanks() - –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ä–∞–Ω–≥–∏');
    console.log('üÜô LEVEL SYSTEM:');
    console.log('- debugLevels() - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ');
    console.log('- setTestBalance(amount) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å');
    console.log('- testLevelProgression() - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é —É—Ä–æ–≤–Ω–µ–π');
    console.log('- showLevelsConfig() - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π');
    console.log('- showRanksInfo() - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–∞—Ö');
    console.log('- findLevelByXP(xp) - –Ω–∞–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É XP');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_active –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(async () => {
        if (window.labubuGame && window.labubuGame.userId && window.labubuGame.db) {
            try {
                const timeResponse = await fetch('https://labubucoin.vercel.app/api/server-time');
                const { serverTime } = await timeResponse.json();
                await window.labubuGame.db.updateLastActive(window.labubuGame.userId, serverTime);
            } catch (error) {
                console.error('Error updating last_active:', error);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
                await window.labubuGame.db.updateLastActive(window.labubuGame.userId, new Date().toISOString());
            }
        }
    }, 60 * 1000);

    // –ù–∞–¥—ë–∂–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ last_active –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    window.addEventListener('beforeunload', async (e) => {
        if (window.labubuGame && window.labubuGame.userId && window.labubuGame.db) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            window.labubuGame.setOnlineStatus(false);
            
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏ –≤—Ä–µ–º—è
                await window.labubuGame.db.updateEnergy(window.labubuGame.userId, window.labubuGame.currentEnergy, window.labubuGame.maxEnergy);
                
                const timeResponse = await fetch('https://labubucoin.vercel.app/api/server-time');
                const { serverTime } = await timeResponse.json();
                await window.labubuGame.db.updateLastActive(window.labubuGame.userId, serverTime);
            } catch (error) {
                console.error('Error saving data on unload:', error);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
                await window.labubuGame.db.updateEnergy(window.labubuGame.userId, window.labubuGame.currentEnergy, window.labubuGame.maxEnergy);
                await window.labubuGame.db.updateLastActive(window.labubuGame.userId, new Date().toISOString());
            }
        }
    });



    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–∞—É–∑ –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥–∞
    document.addEventListener('visibilitychange', () => {
        if (window.labubuGame) {
            if (document.hidden) {
                // –í–∫–ª–∞–¥–∫–∞ —Å–∫—Ä—ã—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥
                console.log('üîá Tab hidden, pausing online income');
                window.labubuGame.setOnlineStatus(false);
            } else {
                // –í–∫–ª–∞–¥–∫–∞ –≤–∏–¥–∏–º–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –¥–æ—Ö–æ–¥
                console.log('üëÅÔ∏è Tab visible, resuming online income');
                window.labubuGame.setOnlineStatus(true);
            }
        }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
    window.addEventListener('focus', () => {
        if (window.labubuGame) {
            console.log('üéØ Window focused, resuming online income');
            window.labubuGame.setOnlineStatus(true);
        }
    });

    window.addEventListener('blur', () => {
        if (window.labubuGame) {
            console.log('üò¥ Window blurred, pausing online income');
            window.labubuGame.setOnlineStatus(false);
        }
    });
});